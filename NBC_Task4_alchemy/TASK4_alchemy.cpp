#include <iostream>
#include <algorithm>
#include <vector>
#include <string>

using namespace std;

// PotionRecipe 클래스: 재료 목록을 vector<string>으로 변경
class PotionRecipe {
public:
    string potionName;
    vector<string> ingredients; // 단일 재료에서 재료 '목록'으로 변경

    // 생성자: 재료 목록을 받아 초기화하도록 수정
    PotionRecipe(const string& name, const vector<string>& ingredients)
        : potionName(name), ingredients(ingredients) {}

};

// AlchemyWorkshop 클래스: 레시피 목록을 관리
class AlchemyWorkshop {
private:
    vector<PotionRecipe> recipes;

public:
    // addRecipe 메서드: 재료 목록(vector)을 매개변수로 받도록 수정
    void addRecipe(const string& name, const vector<string>& ingredients) {
        recipes.push_back(PotionRecipe(name, ingredients));
        cout << ">> 새로운 레시피 '" << name << "'이(가) 추가되었습니다." << endl;
    }

    // 모든 레시피 출력 메서드
    void displayAllRecipes() const {
        if (recipes.empty()) {
            cout << "아직 등록된 레시피가 없습니다." << endl;
            return;
        }

        cout << "\n--- [ 전체 레시피 목록 ] ---" << endl;
        for (size_t i = 0; i < recipes.size(); ++i) {
            cout << "- 물약 이름: " << recipes[i].potionName << endl;
            cout << "  > 필요 재료: ";

            // 재료 목록을 순회하며 출력
            for (size_t j = 0; j < recipes[i].ingredients.size(); ++j) {
                cout << recipes[i].ingredients[j];
                // 마지막 재료가 아니면 쉼표로 구분
                if (j < recipes[i].ingredients.size() - 1) {
                    cout << ", ";
                }
            }
            cout << endl;
        }
        cout << "---------------------------\n";
    }
    PotionRecipe* searchRecipeByName(string& name)
    {
        bool find = false;

        for (auto& PotionRecipe_ : recipes)
        {
            if (PotionRecipe_.potionName == name)
            {
                find = true;
                cout << endl;
                cout << "- 물약 이름: " << PotionRecipe_.potionName << endl;
                cout << "  > 필요 재료: ";
                for (auto PotionRecipe_ing : PotionRecipe_.ingredients)
                {
                    cout << PotionRecipe_ing<<" ";

                }
            }
        }
        if (find) {
            cout << endl;
            return 0;
        }
        else {
            cout << "포션 이름으로 찾지못함" << endl;
        }
    };

    PotionRecipe* searchRecipeByIngredient(string ingredient)
    {

        bool find=false;
        for (auto& PotionRecipe_ : recipes)
        {
            for (auto PotionRecipe_ing : PotionRecipe_.ingredients)
            {
                if (PotionRecipe_ing == ingredient)
                {
                    find = true;
                    cout << endl;
                    cout << "- 물약 이름: " << PotionRecipe_.potionName << endl;
                    cout << "  > 필요 재료: ";
                }
                cout <<  PotionRecipe_ing << " ";

            }
        }
        if (find) {
            cout << endl;
            return 0;
        }
        else {
            cout << "물약 재료가 포함된 레시피 찾지못함" << endl;
        }
        
    };
};
int main() {
    AlchemyWorkshop myWorkshop;

    while (true) {
        cout << endl;
        cout << "# 연금술 공방 관리 시스템" << endl;
        cout << "1. 레시피 추가" << endl;
        cout << "2. 모든 레시피 출력" << endl;
        cout << "3. 물약 이름 검색" << endl;
        cout << "4. 물약 재료가 포함된 레시피" << endl;
        cout << "5. 종료" << endl;
        cout << "선택: ";

        int choice;
        cin >> choice;
        string search;
        if (cin.fail()) {
            cout << "잘못된 입력입니다. 숫자를 입력해주세요." << endl;
            cin.clear();
            cin.ignore(10000, '\n');
            continue;
        }

        if (choice == 1) {
            string name;
            cout << "물약 이름: ";
            cin.ignore(10000, '\n');
            getline(cin, name);

            // 여러 재료를 입력받기 위한 로직
            vector<string> ingredients_input;
            string ingredient;
            cout << "필요한 재료들을 입력하세요. (입력 완료 시 '끝' 입력)" << endl;

            while (true) {
                cout << "재료 입력: ";
                getline(cin, ingredient);

                // 사용자가 '끝'을 입력하면 재료 입력 종료
                if (ingredient == "끝") {
                    break;
                }
                ingredients_input.push_back(ingredient);
            }

            // 입력받은 재료가 하나 이상 있을 때만 레시피 추가
            if (!ingredients_input.empty()) {
                myWorkshop.addRecipe(name, ingredients_input);
            }
            else {
                cout << ">> 재료가 입력되지 않아 레시피 추가를 취소합니다." << endl;
            }

        }
        else if (choice == 2) {
            myWorkshop.displayAllRecipes();

        }
        else if (choice == 3) {
            cout << "물약 이름 입력: ";
            cin>>search;
            myWorkshop.searchRecipeByName(search);

        }
        else if (choice == 4) {
            cout << "재료 이름 입력: ";
            cin >> search;
            myWorkshop.searchRecipeByIngredient(search);

        }
        else if (choice == 5) {
            cout << "공방 문을 닫습니다..." << endl;
            break;

        }
        else {
            cout << "잘못된 선택입니다. 다시 시도하세요." << endl;
        }
    }

    return 0;
};